buildscript {
    repositories {
        mavenCentral()
    }

    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

plugins {
    id 'idea'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.2'
}

ext {
    grpcVersion = "1.0.1"
    lombokVersion = "1.16.10"
    protobufVersion = "3.1.0"
}

allprojects {
    repositories {
        mavenCentral()
    }
}

apply from: file('gradle/convention.gradle')

subprojects {
    apply plugin: 'java'
    apply plugin: 'project-report'

    group = "com.fullcontact.${rootProject.name}"

    configurations.all {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'log4j', module: 'log4j'
    }

    configurations {
        provided
    }

    sourceSets {
        main {
            compileClasspath += configurations.provided
            runtimeClasspath -= configurations.provided
        }
        test {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }
    }

    configurations.compile {
        // XXX a lot of dependencies depend on lombok as a compile time dep
        // when they should only depend on it as "provided" (or not transitively
        // at all). Until they are fixed, explicitly exclude it.
        exclude group: 'org.projectlombok', module: 'lombok'
    }

    dependencies {
        provided "org.projectlombok:lombok:${lombokVersion}"
        compile 'org.slf4j:slf4j-api:1.7.10'

        testCompile "junit:junit:4.12"
        testCompile "org.assertj:assertj-core:3.1.0"
        testCompile "org.assertj:assertj-guava:3.1.0"
        testCompile "org.easymock:easymock:3.4"
        testCompile 'org.powermock:powermock-api-easymock:1.6.2'
        testCompile('ch.qos.logback:logback-classic:1.0.13')
        testCompile('ch.qos.logback:logback-core:1.0.13')
    }
}

project(":jersey-rpc-support") {
    apply plugin: 'maven'
    apply plugin: 'com.google.protobuf'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ['java', 'grpc', 'jersey'].each { plugin ->
        sourceSets.main.java.srcDirs += file("${protobuf.generatedFilesBaseDir}/main/${plugin}");
        sourceSets.test.java.srcDirs += file("${protobuf.generatedFilesBaseDir}/test/${plugin}");
    }

    dependencies {
        compile "com.google.protobuf:protobuf-java:${protobufVersion}"
        compile "com.google.protobuf:protobuf-java-util:${protobufVersion}"
        compile "io.grpc:grpc-protobuf:${grpcVersion}"
        compile "io.grpc:grpc-stub:${grpcVersion}"
        compile "javax.ws.rs:javax.ws.rs-api:2.0.1"
    }

    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"
        }
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {}
            }
        }
    }
}

project(":protoc-gen-jersey") {
    apply plugin: 'maven'
    apply plugin: 'com.google.protobuf'
    apply plugin: 'com.github.johnrengelman.shadow'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ['java', 'grpc'].each { plugin ->
        sourceSets.main.java.srcDirs += file("${protobuf.generatedFilesBaseDir}/main/${plugin}");
        sourceSets.test.java.srcDirs += file("${protobuf.generatedFilesBaseDir}/test/${plugin}");
    }

    dependencies {
        compile project(':jersey-rpc-support')
        compile "com.google.protobuf:protobuf-java:${protobufVersion}"
        compile "com.google.protobuf:protobuf-java-util:${protobufVersion}"
        compile "io.grpc:grpc-protobuf:${grpcVersion}"
        compile "io.grpc:grpc-stub:${grpcVersion}"
        compile "com.github.spullara.mustache.java:compiler:0.9.4"
        compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.5"
        compile "com.fasterxml.jackson.core:jackson-databind:2.8.5"

        testCompile 'org.glassfish.jersey.core:jersey-common:2.24.1'
    }

    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"
        }

        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {}
            }
        }
    }

    task buildArtifacts(type: Copy) {
        from(buildDir) {
            rename 'protoc-gen-jersey$', '$0-osx-x86_64.exe'
        }
        from(buildDir) {
            rename 'protoc-gen-jersey$', '$0-linux-x86_64.exe'
        }
        into "$buildDir/archives"
    }

    artifacts {
        archives("$buildDir/archives/protoc-gen-jersey-osx-x86_64.exe" as File) {
            name "protoc-gen-jersey"
//            file "$buildDir/protoc-gen-jersey-osx-x86_64.exe" as File
            classifier "osx-x86_64"
            type "exe"
            extension "exe"
            builtBy buildArtifacts
        }
        archives("$buildDir/archives/protoc-gen-jersey-linux-x86_64.exe" as File) {
            name "protoc-gen-jersey"
//            file "$buildDir/protoc-gen-jersey-linux-x86_64.exe" as File
            classifier "linux-x86_64"
            type "exe"
            extension "exe"
            builtBy buildArtifacts
        }
    }

    ext.mainClassName = 'com.fullcontact.rpc.jersey.Main'
    shadowJar {
        mergeServiceFiles()

        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'

        manifest {
            attributes("Main-Class": mainClassName,
                "Implementation-Version": version)
        }
        archiveName = "protoc-gen-jersey"
        destinationDir = buildDir
    }

    task prependShellStub(type: Exec) {
        workingDir = projectDir

        commandLine './prepend-stub.sh', buildDir
    }

    prependShellStub.dependsOn(shadowJar)
    buildArtifacts.dependsOn(test) // otherwise class files are empty(?)
    buildArtifacts.dependsOn(shadowJar)
    buildArtifacts.dependsOn(prependShellStub)
    shadowJar.finalizedBy(prependShellStub)
}

project(":integration-test-base") {
    apply plugin: 'com.google.protobuf'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ['java', 'grpc'].each { plugin ->
        sourceSets.main.java.srcDirs += file("${protobuf.generatedFilesBaseDir}/main/${plugin}");
        sourceSets.test.java.srcDirs += file("${protobuf.generatedFilesBaseDir}/test/${plugin}");
    }

    dependencies {
        compile 'org.slf4j:jul-to-slf4j:1.7.21'
        testCompile project(':protoc-gen-jersey')
        testCompile('io.dropwizard:dropwizard-core:1.0.5') {
            exclude group: 'org.eclipse.jetty'
        }
        testCompile('io.dropwizard:dropwizard-testing:1.0.5') {
            exclude group: 'org.eclipse.jetty'
        }
        testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jetty:2.23.2'


    }

    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"
        }

        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {}
            }
        }
    }
}

project(":integration-test-serverstub") {
    apply plugin: 'com.google.protobuf'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.dependsOn(':protoc-gen-jersey:shadowJar')

    ['java', 'grpc', 'jersey'].each { plugin ->
        sourceSets.main.java.srcDirs += file("${protobuf.generatedFilesBaseDir}/main/${plugin}");
        sourceSets.test.java.srcDirs += file("${protobuf.generatedFilesBaseDir}/test/${plugin}");
    }

    dependencies {
        testCompile(project(':integration-test-base').sourceSets.test.output)
        testCompile project(':protoc-gen-jersey')
        testCompile('io.dropwizard:dropwizard-core:1.0.5') {
            exclude group: 'org.eclipse.jetty'
        }
        testCompile('io.dropwizard:dropwizard-testing:1.0.5') {
            exclude group: 'org.eclipse.jetty'
        }
        testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jetty:2.23.2'
    }

    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"
        }

        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
            jersey {
                path = 'protoc-gen-jersey/build/protoc-gen-jersey'
            }
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {}
                jersey {
                    option 'yaml=integration-test-base/src/test/proto/http_api_config.yml'
                }
            }
        }
    }
}

project(":integration-test-proxy") {
    apply plugin: 'com.google.protobuf'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.dependsOn(':protoc-gen-jersey:shadowJar')

    ['java', 'grpc', 'jersey'].each { plugin ->
        sourceSets.main.java.srcDirs += file("${protobuf.generatedFilesBaseDir}/main/${plugin}");
        sourceSets.test.java.srcDirs += file("${protobuf.generatedFilesBaseDir}/test/${plugin}");
    }

    dependencies {
        testCompile(project(':integration-test-base').sourceSets.test.output)
        testCompile project(':protoc-gen-jersey')
        testCompile('io.dropwizard:dropwizard-core:1.0.5') {
            exclude group: 'org.eclipse.jetty'
        }
        testCompile('io.dropwizard:dropwizard-testing:1.0.5') {
            exclude group: 'org.eclipse.jetty'
        }
        testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jetty:2.23.2'


    }

    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"
        }

        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
            jersey {
                path = 'protoc-gen-jersey/build/protoc-gen-jersey'
            }
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {}
                jersey {
                    option 'proxy,yaml=integration-test-base/src/test/proto/http_api_config.yml'
                }
            }
        }
    }
}


apply from: file('gradle/release.gradle')
apply from: file('gradle/maven.gradle')
